{"version":3,"file":"static/js/181.1b9285f6.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.jsx","components/ContactsForm/ContactsForm.js","components/ContactListItem/ContactListItem.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/ContactsBar/ContactsBar.styled.jsx","components/ContactsBar/ContactsBar.js","pages/Contacts.js"],"sourcesContent":["import { Form, Field, Formik } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormikWrapper = styled(Formik)``;\n\nexport const FormBox = styled(Form)`\n  gap: 20px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px;\n  max-width: 400px;\n  background: white;\n  border-radius: 30px;\n  & label {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    & span {\n      margin-bottom: 5px;\n      font-size: 20px;\n    }\n  }\n`;\n\nexport const InputName = styled(Field)`\n  padding: 0 20px;\n  background: #e9eff6;\n  line-height: 40px;\n  border-width: 0;\n  border-radius: 5px;\n  font-family: 'Roboto', sans-serif;\n  font-size: 18px;\n\n  &:focus {\n    outline: none;\n    border: solid 2px #560bad;\n  }\n`;\n\nexport const InputTel = styled(InputName)``;\n\nexport const Button = styled.button`\n  --color: black;\n  padding: 5px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-family: inherit;\n  cursor: pointer;\n  width: 8em;\n  height: 2.6em;\n  line-height: 2.5em;\n  margin: 20px;\n  font-size: 17px;\n  border-radius: 6px;\n  font-weight: 500;\n\n  &:hover {\n    color: #fff;\n    background-color: black;\n  }\n\n  &:hover:before {\n    top: -30px;\n    left: -30px;\n  }\n`;\n\nexport const Message = styled.p`\n  color: red;\n`;\n","import { ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport PropTypes from 'prop-types';\nimport {\n  FormBox,\n  InputName,\n  InputTel,\n  Button,\n  FormikWrapper,\n  Message,\n} from './ContactsForm.styled';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst userSchema = object({\n  name: string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst ContactsForm = ({ onSubmit }) => {\n  function handleSubmit({ name, number }, { resetForm }) {\n    onSubmit(name, number);\n    resetForm();\n  }\n\n  return (\n    <FormikWrapper\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={userSchema}\n    >\n      <FormBox autoComplete=\"off\">\n        <label>\n          <span>Name</span>\n          <InputName placeholder=\"Enter contact name\" type=\"text\" name=\"name\" />\n          <ErrorMessage component={Message} name=\"name\" />\n        </label>\n        <label>\n          <span>Phone</span>\n          <InputTel\n            placeholder=\"Enter contact phone\"\n            type=\"tel\"\n            name=\"number\"\n          />\n          <ErrorMessage component={Message} name=\"number\" />\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormBox>\n    </FormikWrapper>\n  );\n};\n\nContactsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactsForm;\n","import styled, { keyframes } from 'styled-components';\nimport { CgSpinner } from 'react-icons/cg';\n\nexport const BtnWrapper = styled.div`\n  display: flex;\n  gap: 5px;\n`;\n\nexport const UserIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50px;\n  height: 50px;\n  font-size: 30px;\n  font-weight: 700;\n  background: transparent;\n  color: #000;\n  border: solid 2px #560bad;\n  border-radius: 15px;\n`;\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\nSpinner.defaultProps = {\n  size: 40,\n};\n\nexport const ContactInfo = styled.div`\n  display: flex;\n  gap: 5px;\n  flex-direction: column;\n`;\n\nexport const ButtonChange = styled.button`\n  padding: 5px;\n  width: 40px;\n  border-color: #000000;\n  border-radius: 50%;\n  transition: border-color 0.2s ease;\n  &:hover {\n    border-color: yellow;\n  }\n  &:hover svg {\n    fill: yellow;\n  }\n  & svg {\n    fill: #000000;\n    transition: fill 0.2s ease;\n  }\n`;\n\nexport const ButtonDelete = styled.button`\npadding: 5px;\nwidth: 40px;\nborder: 1px solid;\nborder-radius: 50%;\ncursor: pointer;\n\n&:hover {\n  color: tomato;\n  background-color: black;\n`;\n\nexport const Name = styled.span`\n  color: #000000;\n`;\nexport const Number = styled.span`\n  color: #560bad;\n`;\n","import { Form, Field, Formik } from 'formik';\nimport styled, { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 1200;\n`;\n\nexport const FormikWrapper = styled(Formik)``;\n\nexport const Title = styled.h3`\n  font-size: 30px;\n  color: #560bad;\n`;\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px;\n  max-width: 400px;\n  text-align: center;\n  animation: ${fadeIn} 0.5s ease;\n  background: white;\n  border-radius: 30px;\n  & label {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    & span {\n      margin-bottom: 5px;\n      font-size: 20px;\n    }\n  }\n`;\n\nexport const InputName = styled(Field)`\n  padding: 0 20px;\n  background: #e9eff6;\n  line-height: 40px;\n  border-width: 0;\n  border-radius: 5px;\n  font-family: 'Roboto', sans-serif;\n  font-size: 18px;\n  text-align: center;\n  &:focus {\n    outline: none;\n    border: solid 2px #560bad;\n  }\n`;\n\nexport const InputTel = styled(InputName)``;\n\nexport const Button = styled.button`\n  --color: black;\n  padding: 5px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-family: inherit;\n  cursor: pointer;\n  width: 8em;\n  height: 2.6em;\n  line-height: 2.5em;\n  margin: 20px;\n  font-size: 17px;\n  border-radius: 6px;\n  font-weight: 500;\n\n  &:hover {\n    color: #fff;\n    background-color: black;\n  }\n\n  &:hover:before {\n    top: -30px;\n    left: -30px;\n  }\n`;\n\nexport const Message = styled.p`\n  color: red;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { createPortal } from 'react-dom';\nimport { patchContacts } from 'redux/contacts/operations';\nimport {\n  Button,\n  FormBox,\n  FormikWrapper,\n  InputName,\n  Message,\n  InputTel,\n  Overlay,\n  Title,\n} from './Modal.styled';\nimport { useContacts } from 'hooks';\nimport { errorNotification, successNotification } from 'hooks/useToasts';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst userSchema = object({\n  name: string().matches(\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  ),\n  number: string().matches(\n    /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n    'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n  ),\n});\n\nconst Modal = ({ onCloseModal, id, name, number }) => {\n  const dispatch = useDispatch();\n  const { allContacts } = useContacts();\n\n  const initialValues = {\n    name: name,\n    number: number,\n  };\n\n  useEffect(() => {\n    const handleEscDown = e => {\n      if (e.code === 'Escape') {\n        onCloseModal();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscDown);\n    };\n  }, [onCloseModal]);\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onCloseModal();\n    }\n  };\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    for (const contact of allContacts) {\n      if (number === contact.number) {\n        errorNotification(\n          `A contact with this number already exists under the name ${contact.name}`\n        );\n        return;\n      }\n    }\n    dispatch(patchContacts({ name, id, number }));\n    onCloseModal();\n    successNotification('Сontact successfully changed');\n    resetForm();\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <FormikWrapper\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={userSchema}\n      >\n        <FormBox autoComplete=\"off\">\n          <Title>Change a contact's name or number</Title>\n          <label>\n            <span>Name</span>\n            <InputName\n              placeholder=\"Enter new contact name\"\n              type=\"text\"\n              name=\"name\"\n            />\n            <ErrorMessage component={Message} name=\"name\" />\n          </label>\n          <label>\n            <span>Phone</span>\n            <InputTel\n              placeholder=\"Enter new contact phone\"\n              type=\"tel\"\n              name=\"number\"\n            />\n            <ErrorMessage component={Message} name=\"number\" />\n          </label>\n          <Button type=\"submit\">Change</Button>\n        </FormBox>\n      </FormikWrapper>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-hot-toast';\nimport { AiOutlineDelete } from 'react-icons/ai';\n\n// import { selectError, selectIsLoading } from 'redux/contacts/contactsSelectors';\nimport { BsThreeDots } from 'react-icons/bs';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ButtonChange,\n  ButtonDelete,\n  ContactInfo,\n  Name,\n  Number,\n  Spinner,\n  UserIcon,\n  BtnWrapper,\n} from './ContactListItem.styled';\nimport Modal from 'components/Modal/Modal';\nimport { useContacts } from 'hooks';\nconst ContactListItem = ({ id, name, number }) => {\n  const [contactId, setContactId] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  const dispatch = useDispatch();\n  const { isLoading, error } = useContacts();\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    setContactId(id);\n\n    if (!error) {\n      toast.success(`Contact ${name} successfully deleted`);\n    }\n  };\n\n  return (\n    <>\n      <UserIcon>{name[0]}</UserIcon>\n      <ContactInfo>\n        <Name>{name}</Name>\n        <Number>{number}</Number>\n        {/* <button type=\"button\" onClick={handleDelete}>\n          Delete\n        </button> */}\n      </ContactInfo>\n      <BtnWrapper>\n        <ButtonChange type=\"button\" onClick={toggleModal}>\n          <BsThreeDots size={20} />\n        </ButtonChange>\n        {isLoading && contactId === id ? (\n          <Spinner size={40} />\n        ) : (\n          <ButtonDelete\n            type=\"button\"\n            onClick={handleDelete}\n            disabled={isLoading}\n          >\n            <AiOutlineDelete size={20} />\n          </ButtonDelete>\n        )}\n      </BtnWrapper>\n      {showModal && (\n        <Modal onCloseModal={toggleModal} id={id} name={name} number={number} />\n      )}\n    </>\n  );\n};\n\n// ContactListItem.propTypes = {\n//   contact: PropTypes.object.isRequired,\n// };\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-basis: calc((100% - 20px - 60px) / 3);\n  align-items: center;\n  gap: 15px;\n  justify-content: space-between;\n  margin-bottom: 0.25rem;\n  padding: 10px 20px;\n\n  border-radius: 5px;\n  color: #fff;\n  background: rgb(223, 225, 235);\n`;\n","import ContactItem from 'components/ContactListItem';\nimport { Item, List, Wrapper } from './ContactList.styled';\nimport { useContacts } from 'hooks';\n\nconst ContactsList = () => {\n  const { filteredContacts } = useContacts();\n\n  return (\n    <Wrapper>\n      {filteredContacts.length > 0 ? (\n        <>\n          <List>\n            {filteredContacts.map(({ id, name, number }) => (\n              <Item key={id}>\n                <ContactItem id={id} name={name} number={number} />\n              </Item>\n            ))}\n          </List>\n        </>\n      ) : (\n        <b>No contact found</b>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ContactsList;\n","import styled from 'styled-components';\n\nexport const LabelFilter = styled.label`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  & span {\n    margin-right: 10px;\n    padding: 5px;\n    font-size: 20px;\n    color: #000;\n    background: yellow;\n    border-radius: 5px;\n  }\n`;\n\nexport const InputFilter = styled.input`\n  padding: 0 20px;\n  background: #e9eff6;\n  line-height: 40px;\n  border-width: 0;\n  border-radius: 5px;\n  font-family: 'Roboto', sans-serif;\n  font-size: 18px;\n\n  &:focus {\n    outline: none;\n    border: solid 2px #560bad;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filter/slice';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { LabelFilter, InputFilter } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  function handleInputChange(e) {\n    dispatch(filterContacts(e.target.value));\n  }\n\n  return (\n    <LabelFilter>\n      <span>Find contacts by name</span>\n      <InputFilter\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search...\"\n        value={filter}\n        onChange={handleInputChange}\n      />\n    </LabelFilter>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n  padding: 20px;\n  text-align: center;\n  height: 100vh;\n  & h1,\n  h2 {\n    color: black;\n  }\n`;\n\nexport const Title = styled.h1`\n  font-size: 30px;\n`;\n\nexport const Text = styled.h2`\n  font-size: 20px;\n`;\n\nexport const Message = styled.p`\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px;\n  border-radius: 15px;\n  background-color: white;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact, fetchContacts } from 'redux/contacts/operations';\nimport { useContacts, useLoaders } from 'hooks';\nimport ContactsForm from 'components/ContactsForm';\nimport ContactsList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { Message, Title, Wrapper, Text } from './ContactsBar.styled';\nimport { errorNotification, successNotification } from 'hooks/useToasts';\n\nconst ContactsBar = () => {\n  const dispatch = useDispatch();\n  const { allContacts, isLoading, error } = useContacts();\n  const { LoaderBig } = useLoaders();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const notifiesAlert = (numberContact, nameContact) => {\n    return errorNotification(\n      `${numberContact} is already in contacts under the name ${nameContact}.`\n    );\n  };\n\n  const checkСontact = newNumber => {\n    return allContacts.some(contact => contact.number === newNumber);\n  };\n\n  const onSubmit = (name, number) => {\n    if (checkСontact(number)) {\n      return notifiesAlert(number, name);\n    }\n\n    dispatch(addContact({ name, number }));\n    successNotification(`Contact ${name} added successfully`);\n  };\n\n  return (\n    <Wrapper isHeight={allContacts.length > 0}>\n      <Title>Phonebook</Title>\n      <ContactsForm onSubmit={onSubmit} />\n\n      <Text>Your contacts</Text>\n\n      {!error && isLoading && <LoaderBig />}\n\n      {!error && !isLoading && allContacts.length === 0 ? (\n        <Message>Contacts list is empty</Message>\n      ) : (\n        <>\n          <Filter />\n          <ContactsList />\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ContactsBar;\n","import { Helmet } from 'react-helmet';\nimport ContactsBar from 'components/ContactsBar';\nimport { useAuth, useLoaders } from 'hooks';\n\nconst Contacts = () => {\n  const { isLoading } = useAuth();\n  const { LoaderBig } = useLoaders();\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n\n      {isLoading && <LoaderBig />}\n      <ContactsBar />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormikWrapper","styled","Formik","FormBox","Form","InputName","Field","InputTel","Button","Message","initialValues","name","number","userSchema","object","string","matches","required","onSubmit","resetForm","validationSchema","autoComplete","placeholder","type","component","BtnWrapper","UserIcon","spin","keyframes","Spinner","CgSpinner","defaultProps","size","ContactInfo","ButtonChange","ButtonDelete","Name","Number","fadeIn","Overlay","Title","modalRoot","document","querySelector","onCloseModal","id","dispatch","useDispatch","allContacts","useContacts","useEffect","handleEscDown","e","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","contact","errorNotification","patchContacts","successNotification","useState","contactId","setContactId","showModal","setShowModal","isLoading","error","toggleModal","deleteContact","toast","disabled","List","Wrapper","Item","filteredContacts","length","map","LabelFilter","InputFilter","filter","useSelector","selectFilter","value","onChange","filterContacts","Text","LoaderBig","useLoaders","fetchContacts","isHeight","newNumber","some","numberContact","nameContact","addContact","useAuth","Helmet"],"sourceRoot":""}